{"version":3,"sources":["Effects.js","Spheres.js","Rotator.js","Generator.js","Controller.js","App.js","index.js"],"names":["Bloom","children","useThree","gl","camera","size","useState","scene","setScene","composer","useRef","useEffect","useFrame","current","render","ref","args","attachArray","undefined","extend","EffectComposer","RenderPass","UnrealBloomPass","SecSphere","geometry","x","y","z","s","position","scale","color","wireframe","SpheresRotation","posSpheres","axis","THREE","group","rotateOnAxis","state","rotation","RandomSpheres","useMemo","points","radius","PhiNum","thetaNum","phiSpan","Math","PI","thetaSpan","spherical","i","phi","j","theta","set","point","setFromSpherical","push","randomOnSphereEven","p","map","el","_","props","CameraController","controls","OrbitControls","domElement","minDistance","maxDistance","panSpeed","zoomSpeed","dispose","App","Main","autoClear","clearDepth","linear","document","querySelector"],"mappings":"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","file":"static/js/main.5bb79222.chunk.js","sourcesContent":["import { extend, useThree, useFrame } from \"@react-three/fiber\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport React, { useRef, useState, useEffect } from \"react\";\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass });\nexport function Bloom({ children }) {\n  const { gl, camera, size } = useThree();\n  const [scene, setScene] = useState();\n  const composer = useRef();\n  useEffect(\n    () => void scene && composer.current.setSize(size.width, size.height),\n    [size]\n  );\n  useFrame(() => scene && composer.current.render(), 1);\n  return (\n    <>\n      <scene ref={setScene}>{children}</scene>\n      <effectComposer ref={composer} args={[gl]}>\n        <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n        <unrealBloomPass\n          attachArray=\"passes\"\n          args={[undefined, 1., 5, 0]}\n        />{\" \"}\n        {/* args are constructor(resolution: Vector2, strength: number, radius: number, threshold: number) */}\n      </effectComposer>\n    </>\n  );\n}\n","import React, { useRef, useState } from \"react\";\nimport * as THREE from \"three\";\n\nexport function CenterSphere() {\n  const [geometry] = useState(() => new THREE.SphereGeometry(1, 40, 40), []);\n  const ref = useRef();\n  const scale = 3;\n  return (\n    <mesh\n      position={[0, 0, 0]}\n      scale={[scale, scale, scale]}\n      geometry={geometry}\n    >\n      <meshStandardMaterial color=\"red\" roughness={1} wireframe={false} />\n    </mesh>\n  );\n}\n\nexport function SecSphere({ geometry, x, y, z, s }) {\n  return (\n    <mesh position={[x, y, z]} scale={[s, s, s]} geometry={geometry}>\n      <meshStandardMaterial color=\"paleturquoise\" wireframe={false} />\n    </mesh>\n  );\n}\n\nexport function SecSphereNegative({ geometry, x, y, z, s }) {\n  return (\n    <mesh position={[-x, -y, -z]} scale={[s, s, s]} geometry={geometry}>\n      <meshStandardMaterial\n        color=\"lightskyblue\"\n        roughness={1}\n        transparent={true}\n        wireframe={false}\n      />\n    </mesh>\n  );\n}\n","import * as THREE from \"three\";\nimport React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\n\nexport function SpheresRotation({ posSpheres }) {\n  const axis = new THREE.Vector3(0, 0, 0);\n  const angle = 90;\n  const ref = useRef((group) => {\n    group.rotateOnAxis(axis, angle);\n  }, []);\n  useFrame((state) => {\n    ref.current.rotation.z += 0.001;\n    ref.current.rotation.y += 0.001;\n  });\n  return <group ref={ref}>{posSpheres}</group>;\n}\n","import { SecSphere } from \"./Spheres\";\nimport { SpheresRotation } from \"./Rotator\";\nimport React, { useState, useMemo } from \"react\";\nimport * as THREE from \"three\";\n\nfunction randomOnSphereEven(radius, PhiNum, thetaNum) {\n  let points = [];\n  const phiSpan = Math.PI / (PhiNum + 1);\n  const thetaSpan = (Math.PI * 2) / thetaNum;\n  let spherical = new THREE.Spherical();\n\n  // create random spherical coordinate\n  for (let i = 0; i < PhiNum + 1; i++) {\n    var phi = phiSpan * i;\n    for (let j = 0; j < thetaNum; j++) {\n      var theta = thetaSpan * j;\n      spherical.set(radius, phi, theta);\n      let point = new THREE.Vector3();\n      point.setFromSpherical(spherical);\n      points.push(point);\n    }\n  }\n  return points;\n}\n\nexport function RandomSpheres() {\n  const [geometry] = useState(() => new THREE.SphereGeometry(0.1, 40, 40), []);\n\n  const data = useMemo(() => {\n    const radius = 10;\n    const sphereSize = .2;\n    const spheresPerColumn = 50;\n    const spheresPerLine = 50;\n    let points = randomOnSphereEven(radius, spheresPerColumn, spheresPerLine);\n    var p = points.map((el, _) => ({\n      x: el.x,\n      y: el.y,\n      z: el.z,\n      s: sphereSize,\n    }));\n    p.push({\n      x: 0,\n      y: radius,\n      z: 0,\n      s: sphereSize,\n    });\n    p.push({\n      x: 0,\n      y: -radius,\n      z: 0,\n      s: sphereSize,\n    });\n    return p;\n  });\n  const posSpheres = data.map((props, i) => (\n    <SecSphere key={i} {...props} geometry={geometry} />\n  ));\n  return <SpheresRotation posSpheres={posSpheres} />;\n}\n","import { OrbitControls } from \"three-stdlib\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useEffect } from \"react\";\n\nexport const CameraController = () => {\n  const { camera, gl } = useThree();\n  useEffect(() => {\n    const controls = new OrbitControls(camera, gl.domElement);\n\n    controls.minDistance = 3;\n    controls.maxDistance = 200;\n    controls.panSpeed = 0.1;\n    controls.zoomSpeed = 0.2;\n    return () => {\n      controls.dispose();\n    };\n  }, [camera, gl]);\n  return null;\n};\n","import React, { useRef } from \"react\";\nimport { Canvas, extend, useThree, useFrame } from \"@react-three/fiber\";\nimport \"./styles.css\";\nimport { Bloom } from \"./Effects\";\nimport { RandomSpheres } from \"./Generator\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport { CameraController } from \"./Controller\";\nimport \"react-minimal-side-navigation/lib/ReactMinimalSideNavigation.css\";\nextend({ EffectComposer, RenderPass, UnrealBloomPass });\n\nexport default function App() {\n  function Main({ children }) {\n    const scene = useRef();\n    const { gl, camera } = useThree();\n    useFrame(() => {\n      gl.autoClear = false;\n      gl.clearDepth();\n      gl.render(scene.current, camera);\n    }, 2);\n    return <scene ref={scene}>{children}</scene>;\n  }\n\n  return (\n    <>\n      <Canvas linear camera={{ position: [0, 0, 20] }}>\n        <CameraController />\n        <Main>\n          <pointLight />\n          <ambientLight />\n        </Main>\n        <Bloom>\n          <ambientLight />\n          <RandomSpheres />\n        </Bloom>\n      </Canvas>\n    </>\n  );\n}\n","import { render } from \"react-dom\";\nimport React from \"react\";\nimport { extend} from \"@react-three/fiber\";\nimport \"./styles.css\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport App from \"./App\";\nextend({ EffectComposer, RenderPass, UnrealBloomPass });\n\nrender(\n    <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}